{"version":3,"file":"231.0052a8f91f5253c73e7d.chunk.js","mappings":"6KAaA,IAAIA,EAEJ,MAwCMC,EAAO,IAAI,IAAK,mBAAmB,GAAM,K,aAC7C,OAAaA,EAAKC,OAAOC,mBAAmB,G,OAzCb,E,OAAA,E,EAAA,YAC/B,MAAM,KAACC,EAAI,MAAEC,EAAK,OAAEC,GAAUN,EAC9B,IAAIO,EACJ,IACE,oCAA0CH,GAC1C,MAAMI,QAAsB,kCAAwC,mCAAoC,CACtGC,OAAQ,QACRC,SAAU,UACVC,eAAgBN,GACf,CAACD,OAAMQ,cAAc,IAED,uBAApBJ,EAAcK,IACf,gCAAsCL,EAAcM,MACpDP,EAAiB,8B,CAGnB,MAAMQ,GACN,OAAQA,EAAiBC,MACvB,IAAK,0BACFD,EAAiBE,SAAU,EAC5BV,EAAiB,8BACjB,MAGF,QAAS,CACPW,QAAQC,MAAM,8BAA+BJ,GAC7C,MAAMK,EAAe,gBACD,oBAAjBA,EAAoCb,EAAiB,6BAC/B,oBAAjBa,IAAoCb,EAAiB,+BAC7D,K,GAKNc,SAASC,MAAOhB,aAAM,EAANA,EAAQiB,QAAS,YAAcC,mBAAmBlB,GAAU,GACzEC,GACDA,EAAekB,MAAMC,GAAMA,EAAEC,QAAQC,SAEzC,E,YAtCiC,K,iQA0Cf,IACdC,IACF7B,EAAO6B,EACP,yCAA+C,YAAa,CAAChB,EAAG,sBAAuBb,QAAM,IAG/F,G","sources":["webpack://tweb/./src/pages/pageSignImport.ts"],"sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport {putPreloader} from '../components/putPreloader';\nimport App from '../config/app';\nimport {STATE_INIT} from '../config/state';\nimport rootScope from '../lib/rootScope';\nimport {AuthState} from '../types';\nimport Page from './page';\n\nlet data: AuthState.signImport['data'];\n\nconst importWebToken = async() => {\n  const {dcId, token, tgAddr} = data;\n  let mountPageAfter: Promise<{default: Page}>;\n  try {\n    rootScope.managers.apiManager.setBaseDcId(dcId);\n    const authorization = await rootScope.managers.apiManager.invokeApi('auth.importWebTokenAuthorization', {\n      api_id: App.id,\n      api_hash: App.hash,\n      web_auth_token: token\n    }, {dcId, ignoreErrors: true});\n\n    if(authorization._ === 'auth.authorization') {\n      rootScope.managers.apiManager.setUser(authorization.user);\n      mountPageAfter = import('./pageIm');\n      // return;\n    }\n  } catch(err) {\n    switch((err as ApiError).type) {\n      case 'SESSION_PASSWORD_NEEDED': {\n        (err as ApiError).handled = true;\n        mountPageAfter = import('./pagePassword');\n        break;\n      }\n\n      default: {\n        console.error('authorization import error:', err);\n        const defaultState = STATE_INIT.authState._;\n        if(defaultState === 'authStateSignIn') mountPageAfter = import('./pageSignIn');\n        else if(defaultState === 'authStateSignQr') mountPageAfter = import('./pageSignQR');\n        break;\n      }\n    }\n  }\n\n  location.hash = tgAddr?.trim() ? '#?tgaddr=' + encodeURIComponent(tgAddr) : '';\n  if(mountPageAfter) {\n    mountPageAfter.then((m) => m.default.mount());\n  }\n};\n\nconst page = new Page('page-signImport', true, () => {\n  putPreloader(page.pageEl.firstElementChild, true);\n  importWebToken();\n}, (_data: typeof data) => {\n  data = _data;\n  rootScope.managers.appStateManager.pushToState('authState', {_: 'authStateSignImport', data});\n});\n\nexport default page;\n"],"names":["data","page","pageEl","firstElementChild","dcId","token","tgAddr","mountPageAfter","authorization","api_id","api_hash","web_auth_token","ignoreErrors","_","user","err","type","handled","console","error","defaultState","location","hash","trim","encodeURIComponent","then","m","default","mount","_data"],"sourceRoot":""}