{"version":3,"file":"642.be93122d1116ecdc9322.chunk.js","mappings":"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","sources":["webpack://tweb/./src/lib/pluralPolyfill.ts"],"sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nconst NumberPluralizationFormZero: Intl.LDMLPluralRule = 'zero';\nconst NumberPluralizationFormOne: Intl.LDMLPluralRule = 'one';\nconst NumberPluralizationFormTwo: Intl.LDMLPluralRule = 'two';\nconst NumberPluralizationFormFew: Intl.LDMLPluralRule = 'few';\nconst NumberPluralizationFormMany: Intl.LDMLPluralRule = 'many';\nconst NumberPluralizationFormOther: Intl.LDMLPluralRule = 'other';\n\nfunction numberPluralizationForm(lc: number, n: number): Intl.LDMLPluralRule {\n  switch(lc) {\n    // set1\n    case 0x6c74: // lt\n      if(((n % 10) == 1) && (((n % 100) < 11 || (n % 100) > 19))) // n mod 10 is 1 and n mod 100 not in 11..19\n        return NumberPluralizationFormOne;\n      if((((n % 10) >= 2 && (n % 10) <= 9)) && (((n % 100) < 11 || (n % 100) > 19))) // n mod 10 in 2..9 and n mod 100 not in 11..19\n        return NumberPluralizationFormFew;\n      break;\n\n      // set2\n    case 0x6c76: // lv\n      if(n == 0) // n is 0\n        return NumberPluralizationFormZero;\n      if(((n % 10) == 1) && ((n % 100) != 11)) // n mod 10 is 1 and n mod 100 is not 11\n        return NumberPluralizationFormOne;\n      break;\n\n      // set3\n    case 0x6379: // cy\n      if(n == 2) // n is 2\n        return NumberPluralizationFormTwo;\n      if(n == 3) // n is 3\n        return NumberPluralizationFormFew;\n      if(n == 0) // n is 0\n        return NumberPluralizationFormZero;\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      if(n == 6) // n is 6\n        return NumberPluralizationFormMany;\n      break;\n\n      // set4\n    case 0x6265: // be\n    case 0x6273: // bs\n    case 0x6872: // hr\n    case 0x7275: // ru\n    case 0x7368: // sh\n    case 0x7372: // sr\n    case 0x756b: // uk\n      if(((n % 10) == 1) && ((n % 100) != 11)) // n mod 10 is 1 and n mod 100 is not 11\n        return NumberPluralizationFormOne;\n      if((((n % 10) >= 2 && (n % 10) <= 4)) && (((n % 100) < 12 || (n % 100) > 14))) // n mod 10 in 2..4 and n mod 100 not in 12..14\n        return NumberPluralizationFormFew;\n      if(((n % 10) == 0) || (((n % 10) >= 5 && (n % 10) <= 9)) || (((n % 100) >= 11 && (n % 100) <= 14))) // n mod 10 is 0 or n mod 10 in 5..9 or n mod 100 in 11..14\n        return NumberPluralizationFormMany;\n      break;\n\n      // set5\n    case 0x6b7368: // ksh\n      if(n == 0) // n is 0\n        return NumberPluralizationFormZero;\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      break;\n\n      // set6\n    case 0x736869: // shi\n      if((n >= 2 && n <= 10)) // n in 2..10\n        return NumberPluralizationFormFew;\n      if((n >= 0 && n <= 1)) // n within 0..1\n        return NumberPluralizationFormOne;\n      break;\n\n      // set7\n    case 0x6865: // he\n      if(n == 2) // n is 2\n        return NumberPluralizationFormTwo;\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      if((n != 0) && ((n % 10) == 0)) // n is not 0 AND n mod 10 is 0\n        return NumberPluralizationFormMany;\n      break;\n\n      // set8\n    case 0x6373: // cs\n    case 0x736b: // sk\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      if((n >= 2 && n <= 4)) // n in 2..4\n        return NumberPluralizationFormFew;\n      break;\n\n      // set9\n    case 0x6272: // br\n      if((n != 0) && ((n % 1000000) == 0)) // n is not 0 and n mod 1000000 is 0\n        return NumberPluralizationFormMany;\n      if(((n % 10) == 1) && (((n % 100) != 11) && ((n % 100) != 71) && ((n % 100) != 91))) // n mod 10 is 1 and n mod 100 not in 11,71,91\n        return NumberPluralizationFormOne;\n      if(((n % 10) == 2) && (((n % 100) != 12) && ((n % 100) != 72) && ((n % 100) != 92))) // n mod 10 is 2 and n mod 100 not in 12,72,92\n        return NumberPluralizationFormTwo;\n      if((((n % 10) >= 3 && (n % 10) <= 4) || ((n % 10) == 9)) && (((n % 100) < 10 || (n % 100) > 19) && ((n % 100) < 70 || (n % 100) > 79) && ((n % 100) < 90 || (n % 100) > 99))) // n mod 10 in 3..4,9 and n mod 100 not in 10..19,70..79,90..99\n        return NumberPluralizationFormFew;\n      break;\n\n      // set10\n    case 0x736c: // sl\n      if((n % 100) == 2) // n mod 100 is 2\n        return NumberPluralizationFormTwo;\n      if((n % 100) == 1) // n mod 100 is 1\n        return NumberPluralizationFormOne;\n      if(((n % 100) >= 3 && (n % 100) <= 4)) // n mod 100 in 3..4\n        return NumberPluralizationFormFew;\n      break;\n\n      // set11\n    case 0x6c6167: // lag\n      if(n == 0) // n is 0\n        return NumberPluralizationFormZero;\n      if(((n >= 0 && n <= 2)) && (n != 0) && (n != 2)) // n within 0..2 and n is not 0 and n is not 2\n        return NumberPluralizationFormOne;\n      break;\n\n      // set12\n    case 0x706c: // pl\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      if((((n % 10) >= 2 && (n % 10) <= 4)) && (((n % 100) < 12 || (n % 100) > 14))) // n mod 10 in 2..4 and n mod 100 not in 12..14\n        return NumberPluralizationFormFew;\n      if(((n != 1) && (((n % 10) >= 0 && (n % 10) <= 1))) || (((n % 10) >= 5 && (n % 10) <= 9)) || (((n % 100) >= 12 && (n % 100) <= 14))) // n is not 1 and n mod 10 in 0..1 or n mod 10 in 5..9 or n mod 100 in 12..14\n        return NumberPluralizationFormMany;\n      break;\n\n      // set13\n    case 0x6764: // gd\n      if((n == 2) || (n == 12)) // n in 2,12\n        return NumberPluralizationFormTwo;\n      if((n == 1) || (n == 11)) // n in 1,11\n        return NumberPluralizationFormOne;\n      if((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) // n in 3..10,13..19\n        return NumberPluralizationFormFew;\n      break;\n\n      // set14\n    case 0x6776: // gv\n      if((((n % 10) >= 1 && (n % 10) <= 2)) || ((n % 20) == 0)) // n mod 10 in 1..2 or n mod 20 is 0\n        return NumberPluralizationFormOne;\n      break;\n\n      // set15\n    case 0x6d6b: // mk\n      if(((n % 10) == 1) && (n != 11)) // n mod 10 is 1 and n is not 11\n        return NumberPluralizationFormOne;\n      break;\n\n      // set16\n    case 0x6d74: // mt\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      if(((n % 100) >= 11 && (n % 100) <= 19)) // n mod 100 in 11..19\n        return NumberPluralizationFormMany;\n      if((n == 0) || (((n % 100) >= 2 && (n % 100) <= 10))) // n is 0 or n mod 100 in 2..10\n        return NumberPluralizationFormFew;\n      break;\n\n      // set17\n    case 0x6d6f: // mo\n    case 0x726f: // ro\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      if((n == 0) || ((n != 1) && (((n % 100) >= 1 && (n % 100) <= 19)))) // n is 0 OR n is not 1 AND n mod 100 in 1..19\n        return NumberPluralizationFormFew;\n      break;\n\n      // set18\n    case 0x6761: // ga\n      if(n == 2) // n is 2\n        return NumberPluralizationFormTwo;\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      if((n >= 3 && n <= 6)) // n in 3..6\n        return NumberPluralizationFormFew;\n      if((n >= 7 && n <= 10)) // n in 7..10\n        return NumberPluralizationFormMany;\n      break;\n\n      // set19\n    case 0x6666: // ff\n    case 0x6672: // fr\n    case 0x6b6162: // kab\n      if(((n >= 0 && n <= 2)) && (n != 2)) // n within 0..2 and n is not 2\n        return NumberPluralizationFormOne;\n      break;\n\n      // set20\n    case 0x6975: // iuw\n    case 0x6b77: // kw\n    case 0x7365: // se\n    case 0x6e6171: // naq\n    case 0x736d61: // sma\n    case 0x736d69: // smi\n    case 0x736d6a: // smj\n    case 0x736d6e: // smn\n    case 0x736d73: // sms\n      if(n == 2) // n is 2\n        return NumberPluralizationFormTwo;\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      break;\n\n      // set21\n    case 0x616b: // ak\n    case 0x616d: // am\n    case 0x6268: // bh\n    case 0x6869: // hi\n    case 0x6c6e: // ln\n    case 0x6d67: // mg\n    case 0x7469: // ti\n    case 0x746c: // tl\n    case 0x7761: // wa\n    case 0x66696c: // fil\n    case 0x677577: // guw\n    case 0x6e736f: // nso\n      if((n >= 0 && n <= 1)) // n in 0..1\n        return NumberPluralizationFormOne;\n      break;\n\n      // set22\n    case 0x747a6d: // tzm\n      if(((n >= 0 && n <= 1)) || ((n >= 11 && n <= 99))) // n in 0..1 or n in 11..99\n        return NumberPluralizationFormOne;\n      break;\n\n      // set23\n    case 0x6166: // af\n    case 0x6267: // bg\n    case 0x626e: // bn\n    case 0x6361: // ca\n    case 0x6461: // da\n    case 0x6465: // de\n    case 0x6476: // dv\n    case 0x6565: // ee\n    case 0x656c: // el\n    case 0x656e: // en\n    case 0x656f: // eo\n    case 0x6573: // es\n    case 0x6574: // et\n    case 0x6575: // eu\n    case 0x6669: // fi\n    case 0x666f: // fo\n    case 0x6679: // fy\n    case 0x676c: // gl\n    case 0x6775: // gu\n    case 0x6861: // ha\n    case 0x6973: // is\n    case 0x6974: // it\n    case 0x6b6b: // kk\n    case 0x6b6c: // kl\n    case 0x6b73: // ks\n    case 0x6b75: // ku\n    case 0x6b79: // ky\n    case 0x6c62: // lb\n    case 0x6c67: // lg\n    case 0x6d6c: // ml\n    case 0x6d6e: // mn\n    case 0x6d72: // mr\n    case 0x6e62: // nb\n    case 0x6e64: // nd\n    case 0x6e65: // ne\n    case 0x6e6c: // nl\n    case 0x6e6e: // nn\n    case 0x6e6f: // no\n    case 0x6e72: // nr\n    case 0x6e79: // ny\n    case 0x6f6d: // om\n    case 0x6f72: // or\n    case 0x6f73: // os\n    case 0x7061: // pa\n    case 0x7073: // ps\n    case 0x7074: // pt\n    case 0x726d: // rm\n    case 0x736e: // sn\n    case 0x736f: // so\n    case 0x7371: // sq\n    case 0x7373: // ss\n    case 0x7374: // st\n    case 0x7376: // sv\n    case 0x7377: // sw\n    case 0x7461: // ta\n    case 0x7465: // te\n    case 0x746b: // tk\n    case 0x746e: // tn\n    case 0x7473: // ts\n    case 0x7572: // ur\n    case 0x7665: // ve\n    case 0x766f: // vo\n    case 0x7868: // xh\n    case 0x7a75: // zu\n    case 0x617361: // asa\n    case 0x617374: // ast\n    case 0x62656d: // bem\n    case 0x62657a: // bez\n    case 0x627278: // brx\n    case 0x636767: // cgg\n    case 0x636872: // chr\n    case 0x636b62: // ckb\n    case 0x667572: // fur\n    case 0x677377: // gsw\n    case 0x686177: // haw\n    case 0x6a676f: // jgo\n    case 0x6a6d63: // jmc\n    case 0x6b616a: // kaj\n    case 0x6b6367: // kcg\n    case 0x6b6b6a: // kkj\n    case 0x6b7362: // ksb\n    case 0x6d6173: // mas\n    case 0x6d676f: // mgo\n    case 0x6e6168: // nah\n    case 0x6e6e68: // nnh\n    case 0x6e796e: // nyn\n    case 0x706170: // pap\n    case 0x726f66: // rof\n    case 0x72776b: // rwk\n    case 0x736171: // saq\n    case 0x736568: // seh\n    case 0x737379: // ssy\n    case 0x737972: // syr\n    case 0x74656f: // teo\n    case 0x746967: // tig\n    case 0x76756e: // vun\n    case 0x776165: // wae\n    case 0x786f67: // xog\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      break;\n\n      // set24\n    case 0x6172: // ar\n      if(n == 2) // n is 2\n        return NumberPluralizationFormTwo;\n      if(n == 1) // n is 1\n        return NumberPluralizationFormOne;\n      if(n == 0) // n is 0\n        return NumberPluralizationFormZero;\n      if(((n % 100) >= 3 && (n % 100) <= 10)) // n mod 100 in 3..10\n        return NumberPluralizationFormFew;\n      if(((n % 100) >= 11 && (n % 100) <= 99)) // n mod 100 in 11..99\n        return NumberPluralizationFormMany;\n      break;\n  }\n\n  return NumberPluralizationFormOther;\n}\n\n\nfunction languageCodehash(code: string) {\n  let lc = 0;\n  for(let i = 0; i < code.length; ++i) { lc = (lc << 8) + code.charCodeAt(i); }\n  return lc;\n}\n\nconst Intl = {\n  PluralRules: class {\n    public select: (n: number) => Intl.LDMLPluralRule;\n\n    constructor(code: string) {\n      this.select = numberPluralizationForm.bind(null, languageCodehash(code));\n    }\n  }\n};\n\nexport default Intl;\n"],"names":["NumberPluralizationFormZero","NumberPluralizationFormOne","NumberPluralizationFormTwo","NumberPluralizationFormFew","NumberPluralizationFormMany","numberPluralizationForm","lc","n","PluralRules","constructor","code","this","select","bind","i","length","charCodeAt","languageCodehash"],"sourceRoot":""}